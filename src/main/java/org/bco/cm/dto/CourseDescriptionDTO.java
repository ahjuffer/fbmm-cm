/*
 * The MIT License
 *
 * Copyright 2018 Andr√© H. Juffer, Biocenter Oulu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.dto;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.NaturalId;

/**
 * DTO for CourseDescription.
 * @author Andr&#233; H. Juffer, Biocenter Oulu
 */
@Entity( name = "CourseDescriptionDTO" )
@Table( name = "course_descriptions" )
public class CourseDescriptionDTO implements Serializable {
    
    private UUID id_;
    private String courseId_;
    private String title_;
    private String summary_;
    private final Map <Integer,ModuleDTO> modules_;
    private ModuleDTO firstModule_;
    private int firstModuleId_;
    private String teacherId_;
    
    public CourseDescriptionDTO()
    {
        courseId_ = null;
        title_ = null;
        summary_ = null;
        modules_ = new HashMap<>();
        firstModule_ = null;
        firstModuleId_ = -1;
        teacherId_ = null;
    }
    
    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier generated by repository.
     * @return Identifier.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }
    
    public void setCourseId(String courseId)
    {
        courseId_ = courseId;
    }
    
    @Column( name = "course_id" )
    @NaturalId
    public String getCourseId()
    {
        return courseId_;
    }
    
    public void setTitle(String title)
    {
        title_ = title;
    }
    
    @Column( name="title" )
    public String getTitle()
    {
        return title_;
    }
    
    public void setSummary(String summary)
    {
        summary_ = summary;
    }
    
    @Column( name = "summary" )
    public String getSummary()
    {
        return summary_;
    }
    
    public void setModuleMap(Map<Integer, ModuleDTO> modules)
    {
        modules_.clear();
        modules_.putAll(modules);
        this.setFirstModuleId(firstModuleId_);
    }
    
    @OneToMany(
        mappedBy = "courseDescription", 
        cascade = CascadeType.ALL
    )
    @MapKey( name = "moduleId" )
    @JsonIgnore
    public Map<Integer, ModuleDTO> getModuleMap()
    {
        return modules_;
    }
    
    public void setModules(Collection<ModuleDTO> modules)
    {
        modules.forEach(module -> {
            int moduleId = module.getModuleId();
            modules_.put(moduleId, module);
        });
        this.setFirstModuleId(firstModuleId_);
    }
    
    @Transient
    public Collection<ModuleDTO> getModules()
    {
        return modules_.values();
    }
    
    public void setFirstModule(ModuleDTO first)
    {
        firstModule_ = first;
        if ( firstModule_ != null ) {
            firstModuleId_ = firstModule_.getModuleId();
        }
    }
    
    @Transient
    @JsonIgnore
    public ModuleDTO getFirstModule()
    {
        return firstModule_;
    }
    
    public void setFirstModuleId(int firstModuleId) 
    {
        firstModuleId_ = firstModuleId;
        if ( modules_.containsKey(firstModuleId_) ) {
            firstModule_ = modules_.get(firstModuleId_);
        }
    }
    
    /**
     * Return first module identifier value.
     * @return Value or -1 if not set.
     */
    @Column( name = "first_module_id" )
    public int getFirstModuleId()
    {
        if ( firstModule_ != null ) {
            return firstModule_.getModuleId();
        } else {
            return firstModuleId_;
        }
    }
    
    public void setTeacherId(String teacherId)
    {
        teacherId_ = teacherId;
    }
    
    @Column( name="teacher_id" )
    public String getTeacherId()
    {
        return teacherId_;
    }

    @Override
    public String toString()
    {
        String newline = System.getProperty("line.separator");
        StringBuilder s = new StringBuilder("CourseDescriptionDTO : {").append(newline);
        s.append("courseId - ").append(courseId_).append(newline);
        s.append("title - ").append(title_).append(newline);
        s.append("summary - ").append(summary_).append(newline);
        s.append("modules - ").append(modules_).append(newline);
        if ( firstModule_ != null ) {
            s.append("firstModuleId - ").append(firstModule_.getModuleId()).append(newline);
        } else {
            s.append("firstModuleId - ").append(firstModuleId_).append(newline);
        }
        s.append("teacherId - ").append(teacherId_).append(newline);
        s.append("}");
        return s.toString();
    }
    
    @Override
    public boolean equals(Object other)
    {
        if ( this == other ) {
            return true;
        }
        if ( other == null || this.getClass() != other.getClass() ) {
            return false;
        }
        CourseDescriptionDTO course = (CourseDescriptionDTO)other;
        return this.getCourseId().equals(course.getCourseId());
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 19 * hash + Objects.hashCode(this.id_);
        hash = 19 * hash + Objects.hashCode(this.courseId_);
        hash = 19 * hash + Objects.hashCode(this.title_);
        hash = 19 * hash + Objects.hashCode(this.summary_);
        hash = 19 * hash + Objects.hashCode(this.modules_);
        hash = 19 * hash + Objects.hashCode(this.firstModule_);
        hash = 19 * hash + Objects.hashCode(this.teacherId_);
        return hash;
    }
    
    

}
