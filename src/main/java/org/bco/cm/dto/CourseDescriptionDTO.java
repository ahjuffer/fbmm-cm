/*
 * The MIT License
 *
 * Copyright 2018 Andr√© H. Juffer, Biocenter Oulu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.dto;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * DTO for CourseDescription.
 * @author Andr&#233; H. Juffer, Biocenter Oulu
 */
@Entity( name = "CourseDescriptionDTO" )
@Table( name = "course_descriptions" )
public class CourseDescriptionDTO extends AbstractCourseDTO implements Serializable 
{    
    private UUID id_;
    
    public CourseDescriptionDTO()
    {
        super();
        id_ = null;
    }
    
    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier generated by repository.
     * @return Identifier.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }
    
    @OneToMany(
        mappedBy = "courseDescription",
        cascade = CascadeType.ALL, 
        orphanRemoval = true
    )
    public List<ModuleDTO> getModules()
    {
        return super.modules();
    }

    @Override
    public void setParent(ModuleDTO module)
    {
        module.setCourseDescription(this);
    }
    
    @Override
    public String toString()
    {
        String newline = System.getProperty("line.separator");
        StringBuilder s = new StringBuilder("CourseDescriptionDTO : {").append(newline);
        s.append("id - ").append(id_).append(newline);
        s.append(super.toString()).append(newline);
        s.append("}");
        return s.toString();
    }
    
    @Override
    public boolean equals(Object other)
    {
        if ( this == other ) {
            return true;
        }
        if ( other == null ) {
            return false;
        }
        if ( !(other instanceof CourseDescriptionDTO) ) {
            return false;
        }
        CourseDescriptionDTO course = (CourseDescriptionDTO)other;
        return this.getCourseId().equals(course.getCourseId());
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 67 * hash + Objects.hashCode(this.id_);
        return hash;
    }

}
