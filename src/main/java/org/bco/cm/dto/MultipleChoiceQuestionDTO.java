/*
 * The MIT License
 *
 * Copyright 2018 Andr√© H. Juffer, Biocenter Oulu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.dto;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.io.Serializable;
import java.util.UUID;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * DTO for MultipleChoiceQuestion.
 * @author Andr&#233; H. Juffer, Biocenter Oulu
 */
@Entity( name = "MultipleChoiceQuestionDTO" )
@Table( name = "multiple_choice_questions" )
public class MultipleChoiceQuestionDTO implements Serializable {
    
    private UUID id_;
    private String question_;
    private List<ChoiceDTO> choices_;
    private ChoiceDTO answer_;
    
    private QuizDTO parent_;
    
    public MultipleChoiceQuestionDTO()
    {
        id_ = null;
        question_ = null;
        choices_ = new ArrayList<>();
        answer_ = new ChoiceDTO();
        parent_ = null;
    }

    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier assigned or generated by repository.
     * @return Identifier.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }
    
    public void setQuestion(String question)
    {
        question_ = question;
    }
    
    @Column( name = "question" )
    public String getQuestion()
    {
        return question_;
    }
    
    public void setChoices(List<ChoiceDTO> choices)
    {
        choices_ = choices;
        choices_.forEach(choice -> choice.setParentMultipleChoiceQuestion(this));
    }
    
    @OneToMany(
        mappedBy = "parentMultipleChoiceQuestion",
        cascade = CascadeType.ALL, 
        orphanRemoval = true
    )    
    public List<ChoiceDTO> getChoices()
    {
        return choices_;
    }
    
    public void setAnswerValue(String answer)
    {
        answer_.setPhrase(answer);
    }
    
    @JsonIgnore
    @Column( name = "answer" )
    public String getAnswerValue()
    {
        return answer_.getPhrase();
    }
    
    public void setAnswer(ChoiceDTO answer)
    {
        answer_ = answer;
    }
    
    @Transient
    public ChoiceDTO getAnswer()
    {
        return answer_;
    }
    
    protected void setParentQuiz(QuizDTO parent)
    {
        parent_ = parent;
    }
    
    @ManyToOne()
    @JoinColumn( name="quiz_id" )
    protected QuizDTO getParentQuiz()
    {
        return parent_;
    }

    @Override
    public String toString()
    {
        String newline = System.getProperty("line.separator");
        StringBuilder s = new StringBuilder("MultipleChoiceQuestionDTO : {").append(newline);
        s.append("question - ").append(question_).append(newline);
        s.append("choices - ").append(choices_).append(newline);
        s.append("answer - ").append(answer_).append(newline);
        s.append("}");
        return s.toString();
    }
    
}
