/*
 * The MIT License
 *
 * Copyright 2018 Andr√© H. Juffer, Biocenter Oulu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.domain.course;

import com.tribc.cqrs.util.EventUtil;
import com.tribc.ddd.domain.event.Event;
import com.tribc.ddd.domain.event.Eventful;
import java.io.Serializable;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.MapKey;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.bco.cm.domain.course.event.NewCourseAddedToCatalog;
import org.bco.cm.dto.CourseDescriptionDTO;
import org.bco.cm.dto.ModuleDTO;
import org.bco.cm.util.Identifiable;
import org.hibernate.annotations.NaturalId;
import java.util.Random;

/**
 * An unit of teaching that typically lasts one academic term. The course 
 * description consists of a title, summary, and separate components or modules 
 * that are taken in a sequential order by students.
 * @author Andr&#233; H. Juffer, Biocenter Oulu
 */
@Entity( name="CourseDescription" )
@Table( name = "course_descriptions" )
public class CourseDescription implements Eventful, Identifiable, Serializable {
    
    // For generating module identifiers that are unique to a given course.
    private final static Random RANDOM;
    
    static {
        RANDOM = new Random();
        RANDOM.setSeed(Instant.now().toEpochMilli());
    }
    
    private UUID id_;
    private CourseId courseId_;
    private String title_;
    private String summary_;
    private Map<Integer,Module> modules_;
    private Module firstModule_;
    private TeacherId teacherId_;
    
    private final Collection<Event> events_;
    
    protected CourseDescription()
    {
        courseId_ = null;
        title_ = null;
        summary_ = null;
        modules_ = new HashMap<>();  // No modules added.
        firstModule_ = null;
        teacherId_ = null;
        events_ = new HashSet<>();
    }
    
    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier generated by repository.
     * @return Identifier.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }
    
    private void setIdentifier(CourseId courseId)
    {
        if ( courseId == null ) {
            throw new NullPointerException("Missing course identifier.");
        }
        courseId_ = courseId;
    }
    
    /**
     * Returns course identifier.
     * @return Identifier. Never null.
     */
    @Transient
    public CourseId getIdentifier()
    {
        return courseId_;
    }
    
    private void setCourseId(CourseId courseId)
    {
        this.setIdentifier(courseId);
    }
    
    /**
     * Returns course identifier.
     * @return Course identifier. Never null.
     */
    @NaturalId
    @Embedded
    public CourseId getCourseId()
    {
        return this.getIdentifier();
    }

    @Override
    @Transient
    public String getIdentifierAsString() 
    {
        return courseId_.stringValue();
    }
    
    private void setTitle(String title)
    {
        if ( title == null ) {
            throw new NullPointerException("Missing course title.");
        }
        if ( title.isEmpty() ) {
            throw new IllegalArgumentException("Empty course title.");
        }
        title_ = title;
    }
    
    /**
     * Returns course title.
     * @return Title. Never null or empty.
     */
    @Column( name = "title")
    public String getTitle()
    {
        return title_;
    }
    
    private void setSummary(String summary)
    {
        if ( summary == null ) {
            throw new NullPointerException("Missing course summary.");
        }
        if ( summary.isEmpty() ) {
            throw new IllegalArgumentException("Empty course summary.");
        }
        summary_ = summary;
    }
    
    /**
     * Return course summary.
     * @return Summary. Never null or empty.
     */
    @Column( name = "summary")
    public String getSummary()
    {
        return summary_;
    }
    
    private void setModules(Map<Integer,Module> modules)
    {        
        if ( modules_ == null ) {
            throw new NullPointerException("Missing course modules.");
        }
        modules_ = modules;
        modules_.values().forEach(module -> {
            module.setCourseDescription(this);
        });
    }

    @OneToMany( cascade = CascadeType.ALL, orphanRemoval = true )
    @JoinTable(
        name = "join_course_descriptions_modules",
        joinColumns = @JoinColumn( name = "module_id" ),
        inverseJoinColumns = @JoinColumn( name = "course_description_id" )
    )
    @MapKey( name = "moduleId" )
    protected Map<Integer,Module> getModules()
    {
        return modules_;
    }
    
    /**
     * Returns course modules.
     * @return Unmodifiable list of modules. Never null. May be empty.
     */
    public List<Module> modules()
    {
        return Collections.unmodifiableList(new ArrayList<>(modules_.values()));
    }
    
    private void setFirstModule(Module first)
    {
        firstModule_ = first;
        if ( firstModule_ != null ) {
            firstModule_.setCourseDescription(this);
        }
    }
    
    @OneToOne
    @JoinColumn( name = "first_module_id" )
    protected Module getFirstModule()
    {
        return firstModule_;
    }
    
    private void setTeacherId(TeacherId teacherId)
    {
        if ( teacherId == null ) {
            throw new NullPointerException("Missing teacher for course.");
        }
        teacherId_ = teacherId;
    }
    
    @Embedded
    protected TeacherId getTeacherId()
    {
        return teacherId_;
    }
    
    /**
     * Creates a new course description.
     * @param teacher Responsible teacher.
     * @param courseId New course identifier.
     * @param spec New course specification. Must include title and summary, no
     * modules.
     * @return New course description.
     * @see #addModule(org.bco.cm.dto.ModuleDTO) 
     */
    public static CourseDescription valueOf(Teacher teacher, 
                                            CourseId courseId,
                                            CourseDescriptionDTO spec)
    {
        if ( teacher == null ) {
            throw new NullPointerException("Missing new course teacher.");
        }
        if ( spec == null ) {
            throw new NullPointerException("Missing new course specification.");
        }
        CourseDescription course = new CourseDescription();
        course.setCourseId(courseId);
        course.setTeacherId(teacher.getTeacherId());
        course.setSummary(spec.getSummary());
        course.setTitle(spec.getTitle());
        return course;
    }
    
    /**
     * Updates course description.
     * @param spec Course update specification. Title and summary only.
     */
    public void update(CourseDescriptionDTO spec)
    {
        this.setSummary(spec.getSummary());
        this.setTitle(spec.getTitle());
    }
    
    /**
     * Returns a data transfer object.
     * @return DTO.
     */
    public CourseDescriptionDTO toDTO()
    {
        CourseDescriptionDTO dto = new CourseDescriptionDTO();
        dto.setCourseId(courseId_.stringValue());
        dto.setSummary(summary_);
        dto.setTitle(title_);
        dto.setModules(Module.toDTOs(modules_.values()));
        if ( this.hasModules() ) {
            dto.setFirstModule(this.getFirstModule().toDTO());        
        }
        dto.setTeacherId(teacherId_.stringValue());
        return dto;
    }
    
    /**
     * Adds new module to this course.
     * @param spec New module specification. Module is appended to the last
     * module.
     */
    public void addModule(ModuleDTO spec)
    {
        if ( spec == null ) {
            throw new NullPointerException(
                "Trying to add an undefined module to course."
            );
        }
                
        // Create new module according to specification.
        int moduleId = this.generateModuleId();
        Module next = Module.valueOf(moduleId, spec);
        next.setCourseDescription(this);
        
        // The new module becomes the first module of this course, if no other modules
        // are present.
        if ( this.hasModules() ) {
            Module last = this.lastModule();
            last.setNext(next);
        } else {
            this.setFirstModule(next);
        }
        
        // Save new module.
        modules_.put(moduleId, next);
    }
    
    
    private boolean hasModules()
    {
        return !modules_.isEmpty();
    }
    
    private Module firstModule()
    {
        if ( modules_.isEmpty() ) {
            throw new IllegalStateException("No modules specified for course.");
        }
        return this.getFirstModule();
    }
    
    private Module lastModule()
    {
        if ( modules_.isEmpty() ) {
            throw new IllegalStateException("No modules specified for course.");
        }
        Module last = this.firstModule();
        Module next = last.toNext();
        while ( next != last ) {
            last = next;
            next = last.toNext();
        }
        return last;
    }
    
    /**
     * Returns identifier only unique in context of this course.
     * @return Identifier.
     */
    private int generateModuleId()
    {
        int bound = Integer.MAX_VALUE - 1;
        int id = RANDOM.nextInt(bound);
        while ( modules_.containsKey(id) ) {
            id = RANDOM.nextInt(bound);
        }
        return id;
    }

    @Override
    @Transient
    public Collection<Event> getEvents() 
    {
        return EventUtil.selectUnhandled(events_);
    }

    @Override
    public void clearEvents() 
    {
        events_.clear();
    }
    
    /**
     * Signals this course is newly to course catalog.
     */
    void addedToCourseCatalog()
    {
        this.events_.add(new NewCourseAddedToCatalog(this));
    }
    
}
