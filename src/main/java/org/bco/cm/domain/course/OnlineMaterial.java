/*
 * The MIT License
 *
 * Copyright 2018 Andr√© H. Juffer, Biocenter Oulu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.domain.course;

import java.util.Objects;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.JoinColumn;
import org.bco.cm.dto.OnlineMaterialDTO;
import org.hibernate.annotations.NaturalId;

/**
 * A single unit of material that should be studied or employed by the student.
 * @author Andr&#233; H. Juffer, Biocenter Oulu
 */
@Entity( name = "OnlineMaterial" )
@Table( name = "online_materials" )
public class OnlineMaterial {

    private UUID id_;
    private int materialId_;
    private String content_;
    
    private LearningPath learningPath_;
    
    private OnlineMaterial()
    {
        id_ = null;
        materialId_ = 0;
        content_ = null;
        learningPath_ = null;
    }
    
    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier as generated by repository.
     * @return Identifier value.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }

    private void setMaterialId(int materialId)
    {
        if ( materialId <= 0 ) {
            throw new IllegalArgumentException(
                materialId + ": Value of online material identifier must be positive."
            );
        }
        materialId_ = materialId;
    }
    
    /**
     * Returns material identifier. Its value is unique in context of the owning
     * learning path.
     * @return Identifier. Always > 0.
     */
    @Column( name = "material_id" )
    @NaturalId
    public int getMaterialId()
    {
        return materialId_;
    }
    
    private void setContent(String content)
    {
        if ( content == null ) {
            throw new NullPointerException(
                "Content for online material must be provided."
            );
        }
        if ( content.isEmpty() ) {
            throw new IllegalArgumentException(
                "Content for online material must be provided."
            );
        }
        content_ = content;
    }
    
    /**
     * Returns content.
     * @return Content. Never null or empty.
     */
    @Column( name = "content" )
    private String getContent()
    {
        return content_;
    }
    
    void setLearningPath(LearningPath learningPath)
    {
        learningPath_ = learningPath;
    }
    
    @ManyToOne
    @JoinColumn( name = "learning_path_id" )
    protected LearningPath getLearningPath()
    {
        return learningPath_;
    }
    
    /**
     * Creates new online material.
     * @param materialId Local identifier. Supplied by owning learning path.
     * @param spec New online material specification. Must have content.
     * @return New online material.
     */
    static OnlineMaterial valueOf(int materialId, OnlineMaterialDTO spec)
    {
        OnlineMaterial material = new OnlineMaterial();
        material.setMaterialId(materialId);
        material.setContent(spec.getContent());
        return material;
    }
    
    /**
     * Returns date transfer object.
     * @return DTO.
     */
    OnlineMaterialDTO toDTO()
    {
        OnlineMaterialDTO dto = new OnlineMaterialDTO();
        dto.setMaterialId(materialId_);
        dto.setContent(content_);
        return dto;
    }
    
    @Override
    public boolean equals(Object other)
    {
        if ( other == null || this.getClass() != other.getClass() ) {
            return false;
        }
        final OnlineMaterial material = (OnlineMaterial)other;
        return materialId_ == material.getMaterialId();
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 67 * hash + this.materialId_;
        hash = 67 * hash + Objects.hashCode(this.content_);
        return hash;
    }
    
}
