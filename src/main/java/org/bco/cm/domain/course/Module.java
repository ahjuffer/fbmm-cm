/*
 * The MIT License
 *
 * Copyright 2017 André H. Juffer, Biocenter Oulu.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.domain.course;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import org.bco.cm.dto.ModuleDTO;
import org.bco.cm.dto.ModuleItemDTO;
import org.hibernate.annotations.NaturalId;

/**
 * A component in a course. A valid module should consist of one or more module 
 * items, each of which may represent for instance an assignment or a quiz.
 * @author André H. Juffer, Biocenter Oulu
 */
@Entity( name = "Module" )
@Table ( name = "modules")
public class Module implements Serializable {
    
    private UUID id_;
    private int moduleId_;
    private String name_;
    private List<ModuleItem> moduleItems_;
    
    // Parents. Only one is assigned.
    private CourseDescription courseDescription_;
    private Course course_;
    
    protected Module()
    {
        moduleId_ = -1;
        name_ = null;
        moduleItems_ = new ArrayList<>();        
        courseDescription_ = null;
        course_ = null;
    }
    
    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier as generated by repository.
     * @return Identifier value.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }

    /**
     * Sets module identifier. Its value must be provided by the owning course
     * description.
     * @param id Identifier.
     */    
    void setModuleId(int id)
    {
        moduleId_ = id;
    }
    
    /**
     * Returns module identifier.
     * @return Identifier.
     */
    @Column( name = "module_id" )
    @NaturalId
    protected int getModuleId()
    {
        return moduleId_;
    }
    
    private void setName(String name)
    {
        if ( name == null ) {
            throw new NullPointerException("Missing module name.");
        }
        if ( name.isEmpty() ) {
            throw new IllegalArgumentException("Missing module name.");            
        }
        name_ = name;
    }     
    
    /**
     * Returns module name.
     * @return Module name. Never null, never empty.
     */
    @Column ( name = "name" )
    protected String getName()
    {
        return name_;
    }
    
    private void setModuleItems(List<ModuleItem> moduleItems)
    {
        if ( moduleItems != null ) {
            moduleItems_ = moduleItems;
            moduleItems_.forEach(item -> item.setParentModule(this));
        }
    }
    
    /**
     * Returns the module items.
     * @return Module items.
     */
    @OneToMany(
        mappedBy = "parentModule",
        cascade = CascadeType.ALL, 
        orphanRemoval = true
    )        
    @OrderBy("moduleItemId")
    protected List<ModuleItem> getModuleItems()
    {
        return moduleItems_;
    }
    
    /**
     * Adds a quiz.
     * @param quiz Quiz. Is placed at the end of all module items.
     */
    void addQuiz(Quiz quiz)
    {
        int moduleItemId = this.generateModuleItemId();
        quiz.setModuleItemId(moduleItemId);
        quiz.setParentModule(this);
        moduleItems_.add(quiz);
    }
    
    /**
     * Adds an assignment.
     * @param assignment Assignment. Placed at the end of the list of module items.
     */
    void addAssignent(Assignment assignment)
    {
        int moduleItemId = this.generateModuleItemId();
        assignment.setModuleItemId(moduleItemId);
        assignment.setParentModule(this);
        moduleItems_.add(assignment);
    }
    
    /**
     * Sets the course description. Required if this module's parent is a course
     * description.
     * @param courseDescription Course description.
     */
    void setCourseDescription(CourseDescription courseDescription)
    {
        courseDescription_ = courseDescription;
    }
    
    /**
     * Returns owning course description.
     * @return Course description. Null if this module's parent is -not- a course
     * description.
     */
    @ManyToOne
    @JoinColumn( name="course_description_id" )
    protected CourseDescription getCourseDescription()
    {
        return courseDescription_;
    }
    
    /**
     * Sets the active course. Required if this module's parent is an active 
     * course.
     * @param course Course.
     */
    void setCourse(Course course)
    {
        course_ = course;
    }
    
    /**
     * Return course.
     * @return Course. Null if this module's parent is -not- an active course.
     */
    @ManyToOne()
    @JoinColumn( name="course_id" )
    protected Course getCourse()
    {
        return course_;
    }
        
    /**
     * Creates a new module.
     * @param moduleId New module identifier. Must be provided by the owning 
     * course (description).
     * @param spec New module specification. Must include module name. May 
     * include module items (e.g. assignments and/or quizzes).
     * @return New module.
     */
    static Module valueOf(int moduleId, ModuleDTO spec)
    {
        Module module = new Module();
        module.setModuleId(moduleId);
        module.update(spec);
        return module;
    }
    
    /**
     * Updates this module.
     * @param spec Module update specification. Must include module name. May 
     * include module items (e.g. assignments and/or quizzes). Previously 
     * assigned module items are 
     */
    void update(ModuleDTO spec)
    {
        this.clearModuleItems();
        this.setName(spec.getName());
        List<ModuleItemDTO> dtos = spec.getModuleItems();
        dtos.forEach(dto -> {
            ModuleItemFactory.addModuleItem(dto, this);
        });
    }
    
    /**
     * Returns a data transfer object.
     * @return DTO.
     */
    ModuleDTO toDTO()
    {
        ModuleDTO dto = new ModuleDTO();
        dto.setModuleId(this.getModuleId());
        dto.setName(name_);
        if ( courseDescription_ != null ) {
            dto.setCourseDescriptionId(
                courseDescription_.getCourseDescriptionId().stringValue()
            );
        }
        if ( course_ != null ) {
            dto.setCourseId(course_.getCourseId().stringValue());
        }
        List<ModuleItemDTO> moduleItems = ModuleItem.toDTOs(moduleItems_);
        dto.setModuleItems(moduleItems);
        return dto;
    }
    
    /**
     * Returns list of data transfer objects 
     * @param modules Modules.
     * @return List.
     */
    static List<ModuleDTO> toDTOs(List<Module> modules)
    {
        List<ModuleDTO> dtos = new ArrayList<>();
        modules.forEach((module) -> {
            ModuleDTO dto = module.toDTO();
            dtos.add(dto);
        });
        return dtos;
    }

    /**
     * Comparing two modules has meaning only in context of the owning
     * course.
     * @param other Other object.
     * @return Result.
     */
    @Override
    public boolean equals(Object other)
    {
        if ( other == null ) {
            return false;
        }
        if ( this == other ) {
            return true;
        }
        if ( !(other instanceof Module) ) {
            return false;
        }
        Module module = (Module)other;
        return ( moduleId_ == module.getModuleId() );
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 59 * hash + this.moduleId_;
        hash = 59 * hash + Objects.hashCode(this.name_);
        hash = 59 * hash + Objects.hashCode(this.moduleItems_);
        return hash;
    }
    
    /**
     * Returns a copy of the given module.
     * @param moduleId Module identifier as provided by the owning course.
     * @param original Module.
     * @return Copy. Will not include courseId or courseDescriptionId.
     */
    static Module makeCopy(int moduleId, Module original)
    {
        ModuleDTO dto = original.toDTO();
        return Module.valueOf(moduleId, dto);        
    }
    
    private void clearModuleItems()
    {
        moduleItems_.forEach(moduleItem -> moduleItem.setParentModule(null));
        moduleItems_.clear();
    }
    
    /**
     * Returns next module item.
     * @param currentModuleItemId Current module item identifier.
     * @return Next module item. or null if Current module item identifier refers 
     * the last module item in this module.
     * @see #hasNextModuleItem(org.bco.cm.domain.course.ModuleItem) 
     */    
    ModuleItem nextModuleItem(int currentModuleItemId)
    {
        ModuleItem current = this.findModuleItem(currentModuleItemId);
        int index  = moduleItems_.indexOf(current) + 1;
        return moduleItems_.get(index);
    }
    
    /**
     * Is there still another module item.
     * @param current Current module item.
     * @return Result.
     */
    boolean hasNextModuleItem(ModuleItem current)
    {
        return moduleItems_.indexOf(current) < (moduleItems_.size() - 1);
    }
    
    /**
     * Returns module item.
     * @param moduleItemId Module item identifier.
     * @return Module item.
     */
    ModuleItem findModuleItem(int moduleItemId)
    {
        for (ModuleItem item: moduleItems_) {
            if (moduleItemId == item.getModuleItemId() ) {
                return item;
            }
        }
        throw new IllegalArgumentException(moduleItemId + ": No such module item.");
    }
    
    private int generateModuleItemId()
    {
        return moduleItems_.size() + 1;
    }
    
    private boolean containsModuleItem(int moduleItemId)
    {
        for (ModuleItem item: moduleItems_) {
            if (moduleItemId == item.getModuleItemId() ) {
                return true;
            }
        }
        return false;
    }
            
}
