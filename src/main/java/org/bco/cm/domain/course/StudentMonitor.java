/*
 * The MIT License
 *
 * Copyright 2018 Andr√© H. Juffer, Biocenter Oulu
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.bco.cm.domain.course;

import java.io.Serializable;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.bco.cm.domain.student.Student;
import org.bco.cm.dto.StudentMonitorDTO;
import org.bco.cm.util.StudentId;

/**
 * Observes, supervises (controls) the activities of a student while going 
 * through course modules.
 * @author Andr&#233; H. Juffer, Biocenter Oulu
 */
@Entity( name = "StudentMonitor" )
@Table( name = "student_monitors" )
public class StudentMonitor implements Serializable 
{    
    private UUID id_;
    private int monitorId_;
    private StudentId studentId_;
    private int currentModuleId_;
    private int currentModuleItemId_;
    private boolean complete_;
    
    protected StudentMonitor()
    {
        id_ = null;
        monitorId_ = -1;
        studentId_ = null;
        currentModuleId_ = -1;
        currentModuleItemId_ = -1;
        complete_ = true;
    }
    
    protected StudentMonitor(int monitorId, Student student)
    {
        monitorId_ = monitorId;
        studentId_ = student.getStudentId();
        currentModuleId_ = -1;
        currentModuleItemId_ = -1;
    }
    
    private void setId(UUID id)
    {
        id_ = id;
    }
    
    /**
     * Returns identifier generated by repository.
     * @return Identifier.
     */
    @Id
    @GeneratedValue
    protected UUID getId()
    {
        return id_;
    }
    
    private void setMonitorId(int monitorId)
    {
        if ( monitorId <= 0 ) {
            throw new IllegalArgumentException(
                "StudentMonitor: monitorId must be a positive integer."
            );
        }
        monitorId_ = monitorId;
    }
    
    @Column( name = "monitor_id" )
    protected int getMonitorId()
    {
        return monitorId_;
    }
    
    private void setStudentId(StudentId studentId)
    {
        if ( studentId == null ) {
            throw new NullPointerException(
                "studentMonitor: student identifier must be provided."
            );
        }
        studentId_ = studentId;
    }
    
    @Embedded
    protected StudentId getStudentId()
    {
        return studentId_;
    }
    
    private void setCurrentModuleId(int currentModuleId)
    {
        currentModuleId_ = currentModuleId;
    }
    
    @Column( name = "current_module_id" )
    protected int getCurrentModuleId()
    {
        return currentModuleId_;
    }
    
    private void setCurrentModuleItemId(int currentModuleItemId)
    {
        currentModuleItemId_ = currentModuleItemId;
    }
    
    @Column( name = "current_module_item_id" )
    protected int getCurrentModuleItemId()
    {
        return currentModuleItemId_;
    }    

    private void setComplete(boolean complete)    
    {
        complete_ = complete;
    }
    
    @Column( name = "complete" )
    protected boolean getComplete()
    {
        return complete_;
    }
    
    /**
     * Transfers student to the first module.
     * @param first First (or start) module. Must not be null.
     */
    void toFirstModule(Module first)
    {
        this.toNextModule(first);
    }
    
    /**
     * Transfers student to next module.
     * @param next Next module. Must not be null.
     */
    void toNextModule(Module next)
    {
        currentModuleId_ = next.getModuleId();
        currentModuleItemId_ = next.getModuleItems().get(0).getModuleItemId();
    }
    
    /**
     * Transfers student to next module item of the current module.
     * @param next Next module item.
     */
    void toNextModuleItem(ModuleItem next)
    {
        currentModuleItemId_ = next.getModuleItemId();
    }
    
    /**
     * Notification student completed course.
     */
    void completedCourse()
    {
        complete_ = true;
    }
    
    /**
     * Student completed the course?
     * @return Result.
     */
    @Transient
    boolean isComplete()
    {
        return complete_;
    }
    
    /**
     * Returns a data transfer object.
     * @return DTO.
     */
    StudentMonitorDTO toDTO()
    {
        StudentMonitorDTO dto = new StudentMonitorDTO();
        dto.setCurrentModuleId(currentModuleId_);
        dto.setMonitorId(monitorId_);
        dto.setStudentId(studentId_.stringValue());
        return dto;
    }
    
    /**
     * Returns DTO of roster.
     * @param monitors Student monitors.
     * @return DTOs.
     */
    static Map<String,StudentMonitorDTO> toDTOs(Collection<StudentMonitor> monitors)
    {
        Map<String,StudentMonitorDTO> map = new HashMap<>();
        Collection<StudentMonitorDTO> dtos = new HashSet<>();
        for (StudentMonitor monitor : monitors) {
            StudentMonitorDTO dto = monitor.toDTO();
            String studentId = dto.getStudentId();
            map.put(studentId, dto);
        }
        return map;
    }
}
